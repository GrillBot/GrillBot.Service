name: CI/CD

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [master]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  PathsFilter:
    runs-on: ubuntu-latest
    outputs:
      RubbergodService: ${{ steps.filter.outputs.RubbergodService }}
      Graphics: ${{ steps.filter.outputs.Graphics }}
      PointsService: ${{ steps.filter.outputs.PointsService }}
      ImageProcessingService: ${{ steps.filter.outputs.ImageProcessingService }}
      AuditLogService: ${{ steps.filter.outputs.AuditLogService }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Paths filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            RubbergodService:
              - 'src/RubbergodService/**'
            Graphics:
              - 'src/Graphics/**'
            PointsService:
              - 'src/PointsService/**'
            ImageProcessingService:
              - 'src/ImageProcessingService/**'
            AuditLogService:
              - 'src/AuditLogService/**'
  RubbergodService_Build:
    runs-on: ubuntu-latest
    needs: PathsFilter
    if: needs.PathsFilter.outputs.RubbergodService == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        run: dotnet restore -r linux-x64 src/RubbergodService/RubbergodService/
      - name: Build (DEBUG)
        run: dotnet build -c Debug -r linux-x64 --no-self-contained --no-restore src/RubbergodService/RubbergodService/
      - name: Build (RELEASE)
        run: dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/RubbergodService/RubbergodService/
  RubbergodService_CreateDockerImage:
    runs-on: ubuntu-latest
    needs: RubbergodService_Build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/RubbergodService
          push: true
          tags: ghcr.io/grillbot/grillbot.services:rubbergod_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
  RubbergodService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_RubbergodService"
    needs: RubbergodService_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S python3 /scripts/deploy/deploy.py prod/grillbot-rubbergod-service
  RubbergodService_Deploy_Development:
    runs-on: ubuntu-latest
    environment: "Development"
    needs: RubbergodService_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          password: ${{ secrets.SSH_DEV_PASSWORD }}
          port: 22
          script: echo '${{ secrets.SSH_DEV_PASSWORD }}' | sudo -S python3 /scripts/deploy/deploy.py grillbot-rubbergod-service
  Graphics_Build:
    runs-on: ubuntu-latest
    needs: PathsFilter
    if: needs.PathsFilter.outputs.Graphics == 'true'
    defaults:
      run:
        working-directory: src/Graphics/
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
  Graphics_CreateDockerImage:
    runs-on: ubuntu-latest
    needs: Graphics_Build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/Graphics
          push: true
          tags: ghcr.io/grillbot/grillbot.services:graphics
  Graphics_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_Graphics"
    needs: Graphics_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S python3 /scripts/deploy/deploy.py prod/grillbot-graphics
  Graphics_Deploy_Development:
    runs-on: ubuntu-latest
    environment: "Development"
    needs: Graphics_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          password: ${{ secrets.SSH_DEV_PASSWORD }}
          port: 22
          script: echo '${{ secrets.SSH_DEV_PASSWORD }}' | sudo -S python3 /scripts/deploy/deploy.py grillbot-graphics
  PointsService_Build:
    runs-on: ubuntu-latest
    needs: PathsFilter
    if: needs.PathsFilter.outputs.PointsService == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        run: dotnet restore -r linux-x64 src/PointsService/
      - name: Build (DEBUG)
        run: dotnet build -c Debug -r linux-x64 --no-self-contained --no-restore src/PointsService/
      - name: Build (RELEASE)
        run: dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/PointsService/
  PointsService_CreateDockerImage:
    runs-on: ubuntu-latest
    needs: PointsService_Build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/PointsService
          push: true
          tags: ghcr.io/grillbot/grillbot.services:points_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
  PointsService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_PointsService"
    needs: PointsService_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S python3 /scripts/deploy/deploy.py prod/grillbot-points-service
  PointsService_Deploy_Development:
    runs-on: ubuntu-latest
    environment: "Development"
    needs: PointsService_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          password: ${{ secrets.SSH_DEV_PASSWORD }}
          port: 22
          script: echo '${{ secrets.SSH_DEV_PASSWORD }}' | sudo -S python3 /scripts/deploy/deploy.py grillbot-points-service
  ImageProcessingService_Build:
    runs-on: ubuntu-latest
    needs: PathsFilter
    if: needs.PathsFilter.outputs.ImageProcessingService == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        run: dotnet restore -r linux-x64 src/ImageProcessingService/
      - name: Build (DEBUG)
        run: dotnet build -c Debug -r linux-x64 --no-self-contained --no-restore src/ImageProcessingService/
      - name: Build (RELEASE)
        run: dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/ImageProcessingService/
  ImageProcessingService_CreateDockerImage:
    runs-on: ubuntu-latest
    needs: ImageProcessingService_Build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/ImageProcessingService
          push: true
          tags: ghcr.io/grillbot/grillbot.services:image_processing_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
  ImageProcessingService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_ImageProcessingService"
    needs: ImageProcessingService_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S python3 /scripts/deploy/deploy.py prod/grillbot-image-processing-service
  ImageProcessingService_Deploy_Development:
    runs-on: ubuntu-latest
    environment: "Development"
    needs: ImageProcessingService_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          password: ${{ secrets.SSH_DEV_PASSWORD }}
          port: 22
          script: echo '${{ secrets.SSH_DEV_PASSWORD }}' | sudo -S python3 /scripts/deploy/deploy.py grillbot-image-processing-service
  AuditLogService_Build:
    runs-on: ubuntu-latest
    needs: PathsFilter
    if: needs.PathsFilter.outputs.AuditLogService == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        run: dotnet restore -r linux-x64 src/AuditLogService/
      - name: Build (DEBUG)
        run: dotnet build -c Debug -r linux-x64 --no-self-contained --no-restore src/AuditLogService/
      - name: Build (RELEASE)
        run: dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/AuditLogService/
  AuditLogService_CreateDockerImage:
    runs-on: ubuntu-latest
    needs: AuditLogService_Build
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: src/AuditLogService
          push: true
          tags: ghcr.io/grillbot/grillbot.services:audit_log_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
  AuditLogService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_AuditLogService"
    needs: AuditLogService_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S python3 /scripts/deploy/deploy.py prod/grillbot-audit-log-service
  AuditLogService_Deploy_Development:
    runs-on: ubuntu-latest
    environment: "Development"
    needs: AuditLogService_CreateDockerImage
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          password: ${{ secrets.SSH_DEV_PASSWORD }}
          port: 22
          script: echo '${{ secrets.SSH_DEV_PASSWORD }}' | sudo -S python3 /scripts/deploy/deploy.py grillbot-audit-log-service
